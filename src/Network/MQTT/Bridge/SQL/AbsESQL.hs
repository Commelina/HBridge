-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module Network.MQTT.Bridge.SQL.AbsESQL where

newtype Ident = Ident String
  deriving (Eq, Ord, Show, Read)

data Program
    = SProgS Select
    | SProgSW Select Where
    | SProgSM Select Modify
    | SProgSWM Select Where Modify
  deriving (Eq, Ord, Show, Read)

data Select = SSel Fields
  deriving (Eq, Ord, Show, Read)

data Where = SWhr Conds
  deriving (Eq, Ord, Show, Read)

data Modify = SMod Mods
  deriving (Eq, Ord, Show, Read)

data Fields = EFields [Field]
  deriving (Eq, Ord, Show, Read)

data Conds = EConds [Cond]
  deriving (Eq, Ord, Show, Read)

data Mods = EMods [Mod]
  deriving (Eq, Ord, Show, Read)

data Field = EField Ident | EFieldAs Ident Ident
  deriving (Eq, Ord, Show, Read)

data Cond
    = ECondEQ Ident Var
    | ECondNE Ident Var
    | ECondGT Ident Var
    | ECondLE Ident Var
    | ECondMt Ident String
  deriving (Eq, Ord, Show, Read)

data Boolean = VTrue | VFalse
  deriving (Eq, Ord, Show, Read)

data Var
    = VarInt Integer
    | VarDouble Double
    | VarString String
    | VarChar Char
    | VarBool Boolean
  deriving (Eq, Ord, Show, Read)

data Mod = EMod Ident Var
  deriving (Eq, Ord, Show, Read)
