{-# LANGUAGE CPP #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif
{-# LANGUAGE FlexibleInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for PrintESQL.
--   Generated by the BNF converter.

module Network.MQTT.Bridge.SQL.PrintESQL where

import qualified Network.MQTT.Bridge.SQL.AbsESQL
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Network.MQTT.Bridge.SQL.AbsESQL.Ident where
  prt _ (Network.MQTT.Bridge.SQL.AbsESQL.Ident i) = doc (showString i)

instance Print Network.MQTT.Bridge.SQL.AbsESQL.Program where
  prt i e = case e of
    Network.MQTT.Bridge.SQL.AbsESQL.SProgS select -> prPrec i 0 (concatD [prt 0 select])
    Network.MQTT.Bridge.SQL.AbsESQL.SProgSW select where_ -> prPrec i 0 (concatD [prt 0 select, prt 0 where_])
    Network.MQTT.Bridge.SQL.AbsESQL.SProgSM select modify -> prPrec i 0 (concatD [prt 0 select, prt 0 modify])
    Network.MQTT.Bridge.SQL.AbsESQL.SProgSWM select where_ modify -> prPrec i 0 (concatD [prt 0 select, prt 0 where_, prt 0 modify])

instance Print Network.MQTT.Bridge.SQL.AbsESQL.Select where
  prt i e = case e of
    Network.MQTT.Bridge.SQL.AbsESQL.SSel fields -> prPrec i 0 (concatD [doc (showString "SELECT"), prt 0 fields])

instance Print Network.MQTT.Bridge.SQL.AbsESQL.Where where
  prt i e = case e of
    Network.MQTT.Bridge.SQL.AbsESQL.SWhr conds -> prPrec i 0 (concatD [doc (showString "WHERE"), prt 0 conds])

instance Print Network.MQTT.Bridge.SQL.AbsESQL.Modify where
  prt i e = case e of
    Network.MQTT.Bridge.SQL.AbsESQL.SMod mods -> prPrec i 0 (concatD [doc (showString "MODIFY"), prt 0 mods])

instance Print Network.MQTT.Bridge.SQL.AbsESQL.Fields where
  prt i e = case e of
    Network.MQTT.Bridge.SQL.AbsESQL.EFields fields -> prPrec i 0 (concatD [prt 0 fields])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [Network.MQTT.Bridge.SQL.AbsESQL.Fields] where
  prt = prtList

instance Print [Network.MQTT.Bridge.SQL.AbsESQL.Field] where
  prt = prtList

instance Print Network.MQTT.Bridge.SQL.AbsESQL.Conds where
  prt i e = case e of
    Network.MQTT.Bridge.SQL.AbsESQL.EConds conds -> prPrec i 0 (concatD [prt 0 conds])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [Network.MQTT.Bridge.SQL.AbsESQL.Conds] where
  prt = prtList

instance Print [Network.MQTT.Bridge.SQL.AbsESQL.Cond] where
  prt = prtList

instance Print Network.MQTT.Bridge.SQL.AbsESQL.Mods where
  prt i e = case e of
    Network.MQTT.Bridge.SQL.AbsESQL.EMods mods -> prPrec i 0 (concatD [prt 0 mods])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [Network.MQTT.Bridge.SQL.AbsESQL.Mods] where
  prt = prtList

instance Print [Network.MQTT.Bridge.SQL.AbsESQL.Mod] where
  prt = prtList

instance Print Network.MQTT.Bridge.SQL.AbsESQL.Field where
  prt i e = case e of
    Network.MQTT.Bridge.SQL.AbsESQL.EField id -> prPrec i 0 (concatD [prt 0 id])
    Network.MQTT.Bridge.SQL.AbsESQL.EFieldAs id1 id2 -> prPrec i 0 (concatD [prt 0 id1, doc (showString "AS"), prt 0 id2])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Network.MQTT.Bridge.SQL.AbsESQL.Cond where
  prt i e = case e of
    Network.MQTT.Bridge.SQL.AbsESQL.ECondEQ id var -> prPrec i 0 (concatD [prt 0 id, doc (showString "=="), prt 0 var])
    Network.MQTT.Bridge.SQL.AbsESQL.ECondNE id var -> prPrec i 0 (concatD [prt 0 id, doc (showString "/="), prt 0 var])
    Network.MQTT.Bridge.SQL.AbsESQL.ECondGT id var -> prPrec i 0 (concatD [prt 0 id, doc (showString ">"), prt 0 var])
    Network.MQTT.Bridge.SQL.AbsESQL.ECondLE id var -> prPrec i 0 (concatD [prt 0 id, doc (showString "<"), prt 0 var])
    Network.MQTT.Bridge.SQL.AbsESQL.ECondMt id str -> prPrec i 0 (concatD [prt 0 id, doc (showString "=~"), prt 0 str])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Network.MQTT.Bridge.SQL.AbsESQL.Boolean where
  prt i e = case e of
    Network.MQTT.Bridge.SQL.AbsESQL.VTrue -> prPrec i 0 (concatD [doc (showString "True")])
    Network.MQTT.Bridge.SQL.AbsESQL.VFalse -> prPrec i 0 (concatD [doc (showString "False")])

instance Print Network.MQTT.Bridge.SQL.AbsESQL.Var where
  prt i e = case e of
    Network.MQTT.Bridge.SQL.AbsESQL.VarInt n -> prPrec i 0 (concatD [prt 0 n])
    Network.MQTT.Bridge.SQL.AbsESQL.VarDouble d -> prPrec i 0 (concatD [prt 0 d])
    Network.MQTT.Bridge.SQL.AbsESQL.VarString str -> prPrec i 0 (concatD [prt 0 str])
    Network.MQTT.Bridge.SQL.AbsESQL.VarChar c -> prPrec i 0 (concatD [prt 0 c])
    Network.MQTT.Bridge.SQL.AbsESQL.VarBool boolean -> prPrec i 0 (concatD [prt 0 boolean])

instance Print Network.MQTT.Bridge.SQL.AbsESQL.Mod where
  prt i e = case e of
    Network.MQTT.Bridge.SQL.AbsESQL.EMod id var -> prPrec i 0 (concatD [prt 0 id, doc (showString "TO"), prt 0 var])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]
